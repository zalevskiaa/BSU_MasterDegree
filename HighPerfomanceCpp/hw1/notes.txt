Запуски и их время приведены ниже. 

- simple - использование функции func - без ручной векторизации.
- vectorized - использование функции func_p - с ручной векторизациией.
- vectorized with prefetch - использование функции func_p_prefetch - как предыдущий, но ещё с кешированием.

Сравним simple -O0 и -O3 с vectorized -O0.
Ручная векторизация получилась немного быстрее автоматической и значительно быстрее её отсутствия.
Быстрее отсутвия - это понятно почему - потому что векторизация это круто.
Быстрее автоматической - наверное потому что у меня получилось лучше, чем у компилятора

Сравним -O3 и -Ofast.
В simple -Ofast чуть медленнее, в vectorized без разницы.

Сравним vectorized with prefetch при различных k.
Видно, что для слишком маленьких и слишком больших k время увеличивается.
Оптимальное где-то в середине.
Слишком маленькие плохо - наверное потому что уходит слишком много времени на частые кэширования.
Слишком большие плохо - наверное потому что уходит много времени на большие кэширования.

-- simple --


n = 100m, 110 runs
g++ main.cpp -O0 -mavx -o main
474.8 ms

n = 100m, 110 runs
g++ main.cpp -O3 -mavx -o main
253.6 ms

n = 100m, 110 runs
g++ main.cpp -Ofast -mavx -o main
258 ms


-- vectorized --


n = 100m, 110 runs
g++ main.cpp -O0 -mavx -o main
248.4 ms

n = 100m, 110 runs
g++ main.cpp -O3 -mavx -o main
231.2 ms

n = 100m, 110 runs
g++ main.cpp -Ofast -mavx -o main
231.6 ms


-- vectorized with prefetch --


n = 100m, 110 runs
g++ main.cpp -O0 -mavx -o main

k           ms
16          253.9 ms
64          248.2 ms
1024        245.6 ms
32768       245.4 ms
1048576     249.2 ms
