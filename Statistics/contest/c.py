# C. Неравенство Дворецкого-Кифера-Вольфовитца (ДКВ)


# Ограничение времени	1 секунда
# Ограничение памяти	64Mb
# Ввод	стандартный ввод или input.txt
# Вывод	стандартный вывод или output.txt

# Постройте доверительный интервал для эмпирической функции распределения с помощью неравенства Дворецкого-Кифера-Вольфовитца:


# Формат ввода
# На входе в первой строке задано значение . Требуется построить доверительный интервал с уровнем значимости . Во второй строке дана выборка — последовательность из n чисел . Во третьей строке задана последовательность чисел из m чисел , в которых требуется подсчитать доверительные интервалы.

# Пример:

# 0.05
# 1.0 2.0 3.0 4.0
# 0.5 0.6

# Формат вывода
# На выходе ожидаются m строк, где в каждой строке указано по 2 значения — нижняя и верхняя границы доверительного интервала. Гарантируется, что значения  не содержатся в  (чтобы избежать проблем, связанных с тем, как именно определяется эмпирическая функция распределения). Совпадение ответов с правильными проверяется с точностью 1e-7.

# Пример:

# 0.1 0.2
# 0.3 0.4

# Внимание: это неправильные значения для примера выше, и приведены только для демострации формата вывода.

import numpy as np

alpha = float(input())
X = np.array(list(map(float, input().split())))
Y = np.array(list(map(float, input().split())))

X = np.sort(X)
n = len(X)
# X_probs = np.array([i / n for i in range(n)])
Y_probs = np.array([(X < y).sum() for y in Y]) / n

eps = np.sqrt(np.log(2 / alpha) / (2 * n))

probs_dv_low, probs_dv_high = Y_probs - eps, Y_probs + eps

probs_dv_low[probs_dv_low < 0] = 0
probs_dv_high[probs_dv_high > 1] = 1

for l, h in zip(probs_dv_low, probs_dv_high):
    print(f'{l:.8f} {h:.8f}')