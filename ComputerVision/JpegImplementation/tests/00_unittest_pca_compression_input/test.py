import os
import numpy as np
import image_compression as ic


def test_pca_compression_1():
    os.chdir(os.path.dirname(os.path.realpath(__file__)))
    block_1 = np.array([
        [216, 202, 198, 183, 188, 205, 201, 188, 201, 229],
        [225, 210, 204, 199, 191, 193, 200, 204, 217, 239],
        [229, 203, 194, 202, 218, 233, 229, 215, 205, 204],
        [231, 221, 187, 213, 227, 218, 213, 225, 230, 222],
        [238, 237, 206, 192, 197, 223, 237, 233, 231, 239],
        [231, 230, 214, 210, 204, 208, 224, 240, 233, 218],
        [234, 235, 241, 245, 240, 228, 223, 227, 232, 230],
        [243, 239, 221, 212, 216, 230, 225, 204, 201, 213],
        [232, 219, 210, 226, 230, 225, 231, 241, 229, 206],
        [228, 212, 226, 223, 221, 220, 213, 207, 216, 229]
    ]).astype(np.float64)
    answer = ic.pca_compression(block_1, 3)
    true_answer_0 = np.array([
        [-0.41494256270634217, 0.3150340687744991, 0.24019407666422005],
        [-0.43327886188139153, 0.40467947472875315, -0.18837130397196034],
        [-0.14110976220052074, -0.49419626401628947, 0.44434470139432297],
        [-0.23292407262254639, -0.3199088709125469, -0.14200864838919589],
        [-0.6501605954122063, -0.12963166031144369, -0.06284166276065584],
        [-0.29803484093189475, -0.17964447328545885, -0.3856034125745444],
        [0.17314577006949822, 0.15531998878054273, 0.004955931884576201],
        [-0.15530257868341646, -0.022992548002592594, 0.6959000538276171],
        [0.016064262166746585, -0.5001632974285121, -0.12694203754418262],
        [0.006044295856777959, 0.2579217725945827, 0.19015676180229898]
    ]).astype(np.float64)
    true_answer_1 = np.array([
        [-34.292164210693386, -14.548683481873603, 27.59806500111275, 41.42728306034929, 34.40274329034733, 4.0271664276345795, -9.522902188403558, -4.7709175155148955, -10.971489595807498, -33.34910078715108],
        [-5.717454463431134, 2.782008845788725, 30.76951704162419, 6.334663828514018, -10.668824375140565, -13.069492262642195, -18.07776701756148, -25.275475845435036, -1.8911737502676162, 34.81399799855108],
        [17.430371047801238, 3.037886872868021, 3.4624838950398757, -5.75866069610484, 5.940825307602614, 24.54201647418315, 8.548838109807189, -26.174826002153743, -26.657918194809547, -4.3710168142340065]
    ]).astype(np.float64)
    true_answer_2 = np.array([201.1, 208.2, 213.2, 218.7, 223.3, 221.2, 233.5, 220.4, 224.9, 219.5]).astype(np.float64)
    for i in range(true_answer_0.shape[1]):
        assert np.sum(np.abs(answer[0][:, i] - true_answer_0[:, i])) < 1e-5 or np.sum(np.abs(-answer[0][:, i] - true_answer_0[:, i])) < 1e-5
        assert np.sum(np.abs(answer[1][i] - true_answer_1[i])) < 1e-5 or np.sum(np.abs(-answer[1][i] - true_answer_1[i])) < 1e-5
    assert np.sum(np.abs(answer[2] - true_answer_2)) < 1e-5


def test_pca_compression_2():
    os.chdir(os.path.dirname(os.path.realpath(__file__)))
    block_2 = np.array([
        [101, 110, 132, 185, 181, 119, 228, 205, 192, 180, 186, 180, 160, 126, 109, 132, 171, 191, 153, 207],
        [107, 142, 109, 136, 136, 149, 169, 123, 150, 108, 164, 129, 128, 60, 123, 127,  99, 118,  77, 166],
        [127, 117, 140, 112, 149, 155, 122, 127, 127, 132, 138, 111, 115, 116, 111, 116, 116,  91, 104,  84],
        [114, 119, 149, 136,  92, 102, 120, 137, 138, 119, 113, 155, 138, 156, 139, 122, 122, 139, 106, 118],
        [125, 134, 124, 160, 148, 123, 125, 119, 130, 144, 133, 133, 153, 125, 141, 126, 112, 135, 138, 128],
        [149, 127, 139, 115, 152, 122, 126, 133, 111, 121, 140, 120, 117, 123, 111, 119, 126, 107, 132, 118],
        [135, 139, 133, 135, 138, 141, 126, 111, 140, 131, 117, 168,  97, 126, 123, 124, 118, 122, 118, 110],
        [142, 127, 137, 137, 150, 125, 122, 142, 121, 138, 139, 141, 140, 130, 124, 131, 128, 116, 110, 105],
        [114, 127, 133, 145, 135, 110, 139, 139, 132, 123, 142, 147, 131, 139, 103, 102, 114, 108,  94, 104],
        [118, 145, 123, 133, 135, 120, 143, 140, 132, 122, 140, 137, 123, 135, 104,  92,  99,  95,  98,  99],
        [106, 134, 143, 141, 140, 132, 139, 135, 137, 130, 123, 118, 105, 102,  64,  39,  39,  41,  54,  68],
        [ 96, 110, 136, 127, 130, 131, 127, 121, 123, 120, 107, 105,  86, 57,  13,   0,   0,   0,   0,   8],
        [101, 108, 110, 108, 122, 140, 135, 124, 115, 112, 105, 101,  72, 21,   0,   0,   0,   0,   8,   6],
        [103, 111, 108, 111, 114, 132, 128, 124, 113, 118, 111,  96,  60, 0,   0,   8,   8,   0,  11,   0],
        [109, 106, 100, 103,  87,  95,  98, 105,  98, 115, 114, 101,  71, 2,   0,   2,   0,   0,  12,   0],
        [127, 105,  82,  94,  75,  83,  95, 107,  96, 118, 118, 116, 102, 30,  12,   0,   0,  17,   6,  21],
        [134, 123, 105,  69,  41,  80,  95, 127, 117, 137, 145, 135, 113, 63,  43,  14,  10,   9,  27,  34],
        [120, 123,  92,  58,  25,  51,  77, 120, 118, 124, 127, 145, 141, 76,  53,  33,  53,  54,  34,  71],
        [115, 114,  68,  47,  20,  30,  60, 102, 114, 111, 143, 147, 143, 93,  79,  52,  45,  22, 110,  82],
        [111,  94,  48,  40,  26,  31,  56,  80, 106, 108, 123, 130, 130, 105,  60,  49,  81, 120, 202, 166]
    ]).astype(np.float64)
    answer = ic.pca_compression(block_2, 5)
    true_answer_0 = np.load('1.0.npy')
    true_answer_1 = np.load('1.1.npy')
    true_answer_2 = np.load('1.2.npy')
    for i in range(true_answer_0.shape[1]):
        assert np.sum(np.abs(answer[0][:, i] - true_answer_0[:, i])) < 1e-5 or np.sum(np.abs(-answer[0][:, i] - true_answer_0[:, i])) < 1e-5
        assert np.sum(np.abs(answer[1][i] - true_answer_1[i])) < 1e-5 or np.sum(np.abs(-answer[1][i] - true_answer_1[i])) < 1e-5
    assert np.sum(np.abs(answer[2] - true_answer_2)) < 1e-5
