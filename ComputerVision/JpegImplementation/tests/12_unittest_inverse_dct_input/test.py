import os
import numpy as np
import image_compression as ic


# Матрица квантования яркости
y_quantization_matrix = np.array([
    [16, 11, 10, 16, 24, 40, 51, 61],
    [12, 12, 14, 19, 26, 58, 60, 55],
    [14, 13, 16, 24, 40, 57, 69, 56],
    [14, 17, 22, 29, 51, 87, 80, 62],
    [18, 22, 37, 56, 68, 109, 103, 77],
    [24, 35, 55, 64, 81, 104, 113, 92],
    [49, 64, 78, 87, 103, 121, 120, 101],
    [72, 92, 95, 98, 112, 100, 103, 99]
])

# Матрица квантования цвета
color_quantization_matrix = np.array([
    [17, 18, 24, 47, 99, 99, 99, 99],
    [18, 21, 26, 66, 99, 99, 99, 99],
    [24, 26, 56, 99, 99, 99, 99, 99],
    [47, 66, 99, 99, 99, 99, 99, 99],
    [99, 99, 99, 99, 99, 99, 99, 99],
    [99, 99, 99, 99, 99, 99, 99, 99],
    [99, 99, 99, 99, 99, 99, 99, 99],
    [99, 99, 99, 99, 99, 99, 99, 99]
])


def test_inverse_dct_1():
    os.chdir(os.path.dirname(os.path.realpath(__file__)))
    block_1 = np.array([
        [-76, -73, -67, -62, -58, -67, -64, -55],
        [-65, -69, -73, -38, -19, -43, -59, -56],
        [-66, -69, -60, -15, 16, -24, -62, -55],
        [-65, -70, -57, -6, 26, -22, -58, -59],
        [-61, -67, -60, -24, -2, -40, -60, -58],
        [-49, -63, -68, -58, -51, -60, -70, -53],
        [-43, -57, -64, -69, -73, -67, -63, -45],
        [-41, -49, -59, -60, -63, -52, -50, -34]
    ])
    answer = ic.inverse_dct(ic.inverse_quantization(ic.quantization(ic.dct(block_1), y_quantization_matrix), y_quantization_matrix))
    true_answer = np.array([
        [-66.0, -63.0, -71.0, -68.0, -56.0, -65.0, -68.0, -46.0],
        [-71.0, -73.0, -72.0, -46.0, -20.0, -41.0, -66.0, -57.0],
        [-70.0, -78.0, -68.0, -17.0, 20.0, -14.0, -61.0, -63.0],
        [-63.0, -73.0, -62.0, -8.0, 27.0, -14.0, -60.0, -58.0],
        [-58.0, -65.0, -61.0, -27.0, -6.0, -40.0, -68.0, -50.0],
        [-57.0, -57.0, -64.0, -58.0, -48.0, -66.0, -72.0, -47.0],
        [-53.0, -46.0, -61.0, -74.0, -65.0, -63.0, -62.0, -45.0],
        [-47.0, -34.0, -53.0, -74.0, -60.0, -47.0, -47.0, -41.0]
    ]).astype(np.float64)
    assert np.sum(np.abs(answer - true_answer)) < 1e-5


def test_inverse_dct_2():
    os.chdir(os.path.dirname(os.path.realpath(__file__)))
    block_2 = np.array([
        [11, 16, 21, 25, 27, 27, 27, 27],
        [16, 23, 25, 28, 31, 28, 28, 28],
        [22, 27, 32, 35, 30, 28, 28, 28],
        [31, 33, 34, 32, 32, 31, 31, 31],
        [31, 32, 33, 34, 34, 27, 27, 27],
        [33, 33, 33, 33, 32, 29, 29, 29],
        [34, 34, 33, 35, 34, 29, 29, 29],
        [34, 34, 34, 33, 35, 30, 30, 30]
    ])
    answer = ic.inverse_dct(ic.inverse_quantization(ic.quantization(ic.dct(block_2), color_quantization_matrix), color_quantization_matrix))
    true_answer = np.array([
        [18.0, 21.0, 25.0, 30.0, 32.0, 31.0, 29.0, 28.0],
        [19.0, 22.0, 26.0, 30.0, 32.0, 31.0, 29.0, 27.0],
        [21.0, 24.0, 28.0, 31.0, 32.0, 31.0, 29.0, 27.0],
        [24.0, 27.0, 30.0, 33.0, 33.0, 31.0, 28.0, 26.0],
        [27.0, 30.0, 33.0, 34.0, 34.0, 31.0, 28.0, 25.0],
        [30.0, 32.0, 35.0, 36.0, 35.0, 32.0, 27.0, 25.0],
        [33.0, 34.0, 36.0, 37.0, 35.0, 32.0, 27.0, 24.0],
        [34.0, 36.0, 37.0, 38.0, 36.0, 32.0, 27.0, 24.0]
    ]).astype(np.float64)
    assert np.sum(np.abs(answer - true_answer)) < 1e-5
